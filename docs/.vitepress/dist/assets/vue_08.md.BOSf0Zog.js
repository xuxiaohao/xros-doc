import{_ as e,c as a,o,a4 as t,aJ as c}from"./chunks/framework.2gWjYe7W.js";const m=JSON.parse('{"title":"Vue 中如何进行依赖收集？","description":"","frontmatter":{},"headers":[],"relativePath":"vue/08.md","filePath":"vue/08.md","lastUpdated":null}'),d={name:"vue/08.md"},r=t('<h1 id="vue-中如何进行依赖收集" tabindex="-1">Vue 中如何进行依赖收集？ <a class="header-anchor" href="#vue-中如何进行依赖收集" aria-label="Permalink to &quot;Vue 中如何进行依赖收集？&quot;">​</a></h1><h2 id="_1-1-依赖收集的流程" tabindex="-1">1.1 依赖收集的流程 <a class="header-anchor" href="#_1-1-依赖收集的流程" aria-label="Permalink to &quot;1.1 依赖收集的流程&quot;">​</a></h2><ul><li>每个属性都拥有自己的<code>dep</code>属性，存放他所依赖的 watcher，当属性变化后会通知自己对应的 watcher 去更新</li><li>默认在初始化时会调用 render 函数，此时会触发属性依赖收集 <code>dep.depend</code></li><li>当属性发生修改时会触发<code>watcher</code>更新 <code>dep.notify()</code></li></ul><p><img src="'+c+'" alt="" loading="lazy"></p><h2 id="_1-2-vue3依赖收集" tabindex="-1">1.2 Vue3依赖收集 <a class="header-anchor" href="#_1-2-vue3依赖收集" aria-label="Permalink to &quot;1.2 Vue3依赖收集&quot;">​</a></h2><ul><li><code>Vue3</code>中会通过<code>Map</code>结构将属性和<code>effect</code>映射起来。</li><li>默认在初始化时会调用 render 函数，此时会触发属性依赖收集<code>track</code>，</li><li>当属性发生修改时会找到对应的<code>effect</code>列表依次执行<code>trigger</code></li></ul>',6),l=[r];function i(_,n,s,u,h,p){return o(),a("div",null,l)}const v=e(d,[["render",i]]);export{m as __pageData,v as default};
