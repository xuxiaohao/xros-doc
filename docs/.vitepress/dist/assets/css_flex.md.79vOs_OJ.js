import{_ as i,c as s,o as a,a4 as l,a6 as t,a7 as e,a8 as h,a9 as n,aa as d,ab as o,ac as p,ad as k}from"./chunks/framework.2gWjYe7W.js";const q=JSON.parse('{"title":"什么是弹性布局？","description":"","frontmatter":{},"headers":[],"relativePath":"css/flex.md","filePath":"css/flex.md","lastUpdated":null}'),r={name:"css/flex.md"},c=l('<h1 id="什么是弹性布局" tabindex="-1">什么是弹性布局？ <a class="header-anchor" href="#什么是弹性布局" aria-label="Permalink to &quot;什么是弹性布局？&quot;">​</a></h1><h2 id="_1-什么是弹性布局-解决了什么问题" tabindex="-1">1.什么是弹性布局？解决了什么问题？ <a class="header-anchor" href="#_1-什么是弹性布局-解决了什么问题" aria-label="Permalink to &quot;1.什么是弹性布局？解决了什么问题？&quot;">​</a></h2><blockquote><p>弹性布局，也称为弹性盒子布局（Flexible Box Layout）或 Flex 布局，是一种用于网页布局的 CSS 布局模型。它的主要目的是为了更方便地对容器中的子元素进行排列，以适应不同屏幕大小和设备的变化。</p></blockquote><p>解决问题：传统的浮动（<code>float</code>）布局中，要将多个元素水平放在一行时，需要考虑各个元素的宽度、内边距（<code>padding</code>）、边框（<code>border</code>）、外边距（<code>margin</code>）等属性。这些属性的计算和管理变得相当复杂。</p><h2 id="_2-弹性布局主要的概念和属性" tabindex="-1">2.弹性布局主要的概念和属性 <a class="header-anchor" href="#_2-弹性布局主要的概念和属性" aria-label="Permalink to &quot;2.弹性布局主要的概念和属性&quot;">​</a></h2><p>容器（Container）：容器是一个包含一组子元素的元素。在弹性布局中，容器的属性和规则会影响子元素的排列方式。 弹性项（Flex Item）：弹性项是容器中的子元素，它们根据容器的属性来进行排列。 主轴和交叉轴：每个弹性容器都有一个主轴和一个交叉轴。主轴通常是容器的水平方向或垂直方向，而交叉轴则是与主轴垂直的方向。（子元素排列的轴叫主轴，默认情况主轴从左到右水平的）</p><h2 id="_3-容器的属性" tabindex="-1">3.容器的属性 <a class="header-anchor" href="#_3-容器的属性" aria-label="Permalink to &quot;3.容器的属性&quot;">​</a></h2><ul><li><code>display</code> 属性 (使用弹性布局，都要先让元素变为弹性布局的容器) <ul><li>如果希望弹性布局的父元素独占布局一行，就要设置元素的 <code>display</code> 属性为 <code>flex</code></li><li>如果希望弹性布局的父元素显示为行内元素的特征，与其它元素在同一行，就要设置元素的 <code>display</code> 属性为 <code>inline-flex</code></li></ul></li><li>转化为弹性布局，需要将容器设置 <code>display:flex</code> / <code>display:inline-flex</code></li><li><code>flex-direction</code> 属性 (更改主轴的方向) <img src="'+t+'" alt="flex-1" loading="lazy"></li><li><code>flex-wrap</code> 属性 （弹性项是否换行） <img src="'+e+'" alt="flex-2" loading="lazy"></li><li><code>flex-flow</code> 属性 （<code>flex-direction</code> + <code>flex-wrap</code> 简写）</li><li><code>justify-content</code> 属性（主轴上的对其方式） <img src="'+h+'" alt="flex-3" loading="lazy"></li><li><code>align-items</code> 属性（交叉轴上的对其方式） <img src="'+n+`" alt="flex-4" loading="lazy"></li></ul><h2 id="_4-弹性项属性" tabindex="-1">4.弹性项属性 <a class="header-anchor" href="#_4-弹性项属性" aria-label="Permalink to &quot;4.弹性项属性&quot;">​</a></h2><blockquote><p>除了可以对容器设置属性外，还可以对弹性项设置属性。</p></blockquote><ul><li><p><code>order</code> 属性（定义弹性项的排序顺序，为整数数字，无需单位，默认值为 0，越小越靠近起点）</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;c1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;box&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> style</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;order: 1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;1&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;box&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> style</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;order: 3&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;2&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;box&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> style</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;order: 0&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;3&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><p><img src="`+d+'" alt="flex-5" loading="lazy"></p></li><li><p><code>flex-grow</code> 属性 (定义弹性项的放大比例，值为数字，无需单位，默认值不放大，取值越大占据空间越多) <img src="'+o+'" alt="flex-6" loading="lazy"></p></li><li><p><code>flex-shrink</code> 属性 (如果容器空间不足，弹性项可以缩小，定义弹性项的缩小比例，默认值 1， 空间不足则等比例缩小，改为 0，表示不缩小 <img src="'+p+'" alt="flex-7" loading="lazy"></p></li><li><p><code>algin-self</code> 属性 (定义某一个弹性项在交叉轴上的对齐方式) <img src="'+k+'" alt="flex-8" loading="lazy"></p></li></ul>',11),E=[c];function g(y,_,u,f,x,F){return a(),s("div",null,E)}const b=i(r,[["render",g]]);export{q as __pageData,b as default};
