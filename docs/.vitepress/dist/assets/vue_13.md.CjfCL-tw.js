import{_ as e,c as o,o as c,a4 as d}from"./chunks/framework.2gWjYe7W.js";const f=JSON.parse('{"title":"vue3 对比 vue2 的变化","description":"","frontmatter":{},"headers":[],"relativePath":"vue/13.md","filePath":"vue/13.md","lastUpdated":null}'),l={name:"vue/13.md"},i=d('<h1 id="vue3-对比-vue2-的变化" tabindex="-1">vue3 对比 vue2 的变化 <a class="header-anchor" href="#vue3-对比-vue2-的变化" aria-label="Permalink to &quot;vue3 对比 vue2 的变化&quot;">​</a></h1><ul><li>性能优化 <ul><li>使用 <code>Proxy</code> 替代了 <code>Object.defineProperty</code> 实现响应式。因为 <code>defineProperty</code> 需要对属性进行递归重写添加访问器属性，处理复杂数据结构时性能差，而且无法监控属性的添加与删除，只能通过 <code>$set</code> <code>$delete</code> 方法实现。 对数组的处理也不佳。</li><li>模板编译优化。 给动态节点增加了 patchFlag 标记；对静态节点进行静态提升，预字符串化；对事件回调函数进行缓存处理等等</li><li>diff算法优化，全量diff算法中采用最长递增子序列减少节点的移动。在非全量diff算法中只比较动态节点， 通过 <code>patchFlag</code> 标记更新动态的部分。</li></ul></li><li>体积优化 <ul><li>Vue3移除了不常用的API <ul><li>移除 <code>inline-template</code></li><li><code>$on</code> <code>$off</code> <code>$once</code> (需要的话，可以使用 <code>mitt</code> 库实现)</li><li>删除过滤器</li><li><code>$children</code> 移除 (可以通过 <code>provide</code> , <code>inject</code> )</li><li>移除 <code>.sync</code> <code>.native</code> 修饰符( <code>.sync</code> 通过 <code>v-model:xxx</code> 实现， <code>.native</code> 为vue3中的默认行为)，以及不再支持 <code>keycode</code> 作为 <code>v-on</code> 修饰符</li><li>移除全局API。<code>Vue.component</code> <code>Vue.use</code> <code>Vue.directive</code>。 全部挂载到实例上。</li><li>通过构建工具 Tree-shaking 机制实现按需引入， 减少用户打包后体积。</li></ul></li></ul></li><li>支持自定义渲染器 <ul><li>用户可以自定义渲染API打到跨平台的目的。 扩展能力更强，无需改造源码。</li></ul></li><li>TypeScript支持 <ul><li>源码采用TS编写，API对TS的支持更加友好。</li></ul></li><li>源码结构变化 <ul><li>Vue3源码采用 monorepo 方式进行管理（pnpm workspace），将模块拆分到 package 目录中，解耦后可单独使用。</li></ul></li></ul>',2),t=[i];function a(u,n,r,s,_,p){return c(),o("div",null,t)}const m=e(l,[["render",a]]);export{f as __pageData,m as default};
