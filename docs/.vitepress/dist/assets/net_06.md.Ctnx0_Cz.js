import{_ as a,c as e,o as t,a4 as l}from"./chunks/framework.2gWjYe7W.js";const P=JSON.parse('{"title":"GET 和 POST 的区别及使用换场景","description":"","frontmatter":{},"headers":[],"relativePath":"net/06.md","filePath":"net/06.md","lastUpdated":null}'),i={name:"net/06.md"},o=l('<h1 id="get-和-post-的区别及使用换场景" tabindex="-1">GET 和 POST 的区别及使用换场景 <a class="header-anchor" href="#get-和-post-的区别及使用换场景" aria-label="Permalink to &quot;GET 和 POST 的区别及使用换场景&quot;">​</a></h1><h2 id="_1-get-post-使用场景" tabindex="-1">1.GET / POST 使⽤场景 <a class="header-anchor" href="#_1-get-post-使用场景" aria-label="Permalink to &quot;1.GET / POST 使⽤场景&quot;">​</a></h2><ul><li>GET：用于请求获取数据，通常用于获取资源，不应该对服务器状态产生任何影响。GET 请求的参数通常附加在 URL 上，有长度限制，不适合传输敏感数据。(用于获取资源，网页、图片、文档)</li><li>POST：用于向服务器提交数据，通常用于发送表单数据、文件上传等。POST 请求的参数通常包含在请求体中，没有长度限制，适合传输敏感数据。(用于注册、登录、表单提交、对资源的操作等)</li></ul><h2 id="_2-get-和-post-的区别" tabindex="-1">2.GET 和 POST 的区别 <a class="header-anchor" href="#_2-get-和-post-的区别" aria-label="Permalink to &quot;2.GET 和 POST 的区别&quot;">​</a></h2><h3 id="_1-数据传输方式" tabindex="-1">1).数据传输方式 <a class="header-anchor" href="#_1-数据传输方式" aria-label="Permalink to &quot;1).数据传输方式&quot;">​</a></h3><ul><li>GET 请求将数据附加在 URL 中，可以被书签保存，被浏览器历史记录等等，因此不适合传输敏感信息。</li><li>POST 请求将数据包含在请求体中，不会出现在 URL 中，更适合传输敏感信息。</li></ul><h3 id="_2-安全性" tabindex="-1">2).安全性 <a class="header-anchor" href="#_2-安全性" aria-label="Permalink to &quot;2).安全性&quot;">​</a></h3><ul><li>GET 请求通常不是安全的，数据可见，可能被恶意截获，修改。</li><li>POST 请求更安全，因为数据不可见。</li></ul><h3 id="_3-幂等性" tabindex="-1">3).幂等性 <a class="header-anchor" href="#_3-幂等性" aria-label="Permalink to &quot;3).幂等性&quot;">​</a></h3><ul><li>GET 请求是幂等的，多次发送相同的 GET 请求不会对服务器状态产生改变。</li><li>POST 请求通常不是幂等的，多次发送相同的 POST 请求可能导致服务器状态的改变。</li></ul><h3 id="_4-缓存" tabindex="-1">4).缓存 <a class="header-anchor" href="#_4-缓存" aria-label="Permalink to &quot;4).缓存&quot;">​</a></h3><ul><li>GET 请求可以被浏览器缓存，因为它们不会改变服务器状态。</li><li>POST 请求不会被浏览器缓存。</li></ul>',12),r=[o];function n(s,h,_,d,T,c){return t(),e("div",null,r)}const S=a(i,[["render",n]]);export{P as __pageData,S as default};
