import{_ as e,c as r,o as a,a4 as t}from"./chunks/framework.2gWjYe7W.js";const m=JSON.parse('{"title":"Vue中如何检测数组的变化","description":"","frontmatter":{},"headers":[],"relativePath":"vue/06.md","filePath":"vue/06.md","lastUpdated":null}'),o={name:"vue/06.md"},s=t('<h1 id="vue中如何检测数组的变化" tabindex="-1">Vue中如何检测数组的变化 <a class="header-anchor" href="#vue中如何检测数组的变化" aria-label="Permalink to &quot;Vue中如何检测数组的变化&quot;">​</a></h1><h2 id="_1-vue2-中采用重写数组方法的方式" tabindex="-1">1. Vue2 中采用重写数组方法的方式 <a class="header-anchor" href="#_1-vue2-中采用重写数组方法的方式" aria-label="Permalink to &quot;1. Vue2 中采用重写数组方法的方式&quot;">​</a></h2><p>• 数组考虑性能原因没有用<code>defineProperty</code>对数组的每一项进行拦截，而是选择重写数组（<code>push,shift,pop,splice,unshift,sort,reverse</code>）方法。<strong>数组中如果是对象数据类型也会进行递归劫持</strong>。</p><h2 id="_2-vue3-直接采用的是-proxy" tabindex="-1">2. Vue3 直接采用的是 Proxy <a class="header-anchor" href="#_2-vue3-直接采用的是-proxy" aria-label="Permalink to &quot;2.  Vue3 直接采用的是 Proxy&quot;">​</a></h2><ul><li>在 Vue 3.x 中，直接使用 Proxy 实现了更<em>高效</em>和<em>精确</em>的数组变化检测，通过 Proxy，Vue 可以捕获到数组索引和长度的变化，不再需要重写数组的方法。这是 Vue 3.x 在性能方面的一个重要改进（但是由于代理问题，还需要对部分检测方法进行重写）。</li></ul><p><a href="https://github.com/vuejs/vue/blob/main/src/core/observer/array.ts#L12" target="_blank" rel="noreferrer"><strong>Vue2 数组重写</strong></a>，<a href="https://github.com/vuejs/core/blob/main/packages/reactivity/src/baseHandlers.ts#L53" target="_blank" rel="noreferrer"><strong>Vue3 数组重写</strong></a></p>',6),n=[s];function u(c,i,l,_,d,h){return a(),r("div",null,n)}const f=e(o,[["render",u]]);export{m as __pageData,f as default};
