import{_ as i,c as a,o as l,a4 as e,aK as t,aL as o,aM as r,aN as n,aO as d,aP as s,aQ as f,aR as u}from"./chunks/framework.2gWjYe7W.js";const k=JSON.parse('{"title":"Vue 中 diff 算法原理","description":"","frontmatter":{},"headers":[],"relativePath":"vue/09.md","filePath":"vue/09.md","lastUpdated":null}'),_={name:"vue/09.md"},c=e('<h1 id="vue-中-diff-算法原理" tabindex="-1">Vue 中 diff 算法原理 <a class="header-anchor" href="#vue-中-diff-算法原理" aria-label="Permalink to &quot;Vue 中 diff 算法原理&quot;">​</a></h1><h2 id="_1-1-diff-概念" tabindex="-1">1.1 Diff 概念 <a class="header-anchor" href="#_1-1-diff-概念" aria-label="Permalink to &quot;1.1 Diff 概念&quot;">​</a></h2><p>vue 基于虚拟 DOM 做更新 。diff 的核心就是比较两个虚拟节点的差异 。Vue 的 diff 算法是平级比较，不考虑跨级比较的情况。内部采用深度递归的方式 + 双指针的方式进行比较。</p><h2 id="_1-2-vue2-diff-比较流程" tabindex="-1">1.2 Vue2 Diff 比较流程. <a class="header-anchor" href="#_1-2-vue2-diff-比较流程" aria-label="Permalink to &quot;1.2 Vue2 Diff 比较流程.&quot;">​</a></h2><ul><li>1.先比较是否是相同节点 key tag</li><li>2.相同节点比较属性,并复用老节点（将老的虚拟 dom 复用给新的虚拟节点 DOM）</li><li>3.比较儿子节点，考虑老节点和新节点儿子的情况 <ul><li>老的没儿子，现在有儿子。 直接插入新的儿子</li><li>老的有儿子，新的没儿子。直接删除页面节点</li><li>老的儿子是文本，新的儿子是文本，直接更新文本节点即可</li><li>老的儿子是一个列表，新的儿子也是一个列表 updateChildren</li></ul></li><li>4.优化比较：头头、尾尾、头尾、尾头</li><li>5.比对查找进行复用</li></ul><blockquote><p>Vue3 中采用最长递增子序列来实现 diff 优化。</p></blockquote><p><img src="'+t+'" alt="" loading="lazy"></p><h2 id="_1-3-vue3-diff-算法比较流程" tabindex="-1">1.3 Vue3 Diff 算法比较流程 <a class="header-anchor" href="#_1-3-vue3-diff-算法比较流程" aria-label="Permalink to &quot;1.3 Vue3 Diff 算法比较流程&quot;">​</a></h2><p>全量diff:</p><ul><li>刚开始默认从头比对，相同节点则复用节点。</li><li>如果头部节点不一致，就从后向前对比，相同节点则复用。</li><li>默认优化了子节点追加和子节点删除的情况。</li><li>乱序比对，通过<strong>最长递增子序列</strong>实现在复用过程中减少节点的移动操作。</li></ul><ol><li><p>sync from start <img src="'+o+'" alt="" loading="lazy"></p></li><li><p>sync from end <img src="'+r+'" alt="" loading="lazy"></p></li><li><p>common sequence + mount <img src="'+n+'" alt="" loading="lazy"><img src="'+d+'" alt="" loading="lazy"></p></li><li><p>common sequence + unmount <img src="'+s+'" alt="" loading="lazy"></p></li><li><p>unknown sequence</p><ol><li>build key:index map for new children <img src="'+f+'" alt="" loading="lazy"></li><li>loop through old children left to be patched and try to patch</li><li>move and mount <img src="'+u+'" alt="" loading="lazy"></li></ol></li></ol>',11),p=[c];function m(h,g,q,v,y,b){return l(),a("div",null,p)}const D=i(_,[["render",m]]);export{k as __pageData,D as default};
