import{_ as e,c as t,o as a,a4 as o}from"./chunks/framework.2gWjYe7W.js";const h=JSON.parse('{"title":"对 Vue 组件化的理解","description":"","frontmatter":{},"headers":[],"relativePath":"vue/04.md","filePath":"vue/04.md","lastUpdated":null}'),c={name:"vue/04.md"},l=o('<h1 id="对-vue-组件化的理解" tabindex="-1">对 Vue 组件化的理解 <a class="header-anchor" href="#对-vue-组件化的理解" aria-label="Permalink to &quot;对 Vue 组件化的理解&quot;">​</a></h1><blockquote><p><code>WebComponent</code> 组件化的核心组成：模板、属性、事件、插槽、生命周期。</p></blockquote><p>组件化好处: 高内聚、可重用、可组合</p><ul><li><p>组件化开发能大幅提高应用开发效率、测试性、复用性等;</p></li><li><p>降低更新范围，只重新渲染变化的组件；</p></li><li><p><code>Vue</code>中的每个组件都有一个渲染函数 watcher、effect。</p></li><li><p>数据是响应式的，数据变化后会执行 watcher 或者 effect。</p></li><li><p>组件要合理的划分，如果不拆分组件，那更新的时候整个页面都要重新更新。</p></li><li><p>如果过分的拆分组件会导致 watcher、effect 产生过多也会造成性能浪费。</p></li></ul>',4),i=[l];function p(_,r,n,s,d,u){return a(),t("div",null,i)}const m=e(c,[["render",p]]);export{h as __pageData,m as default};
