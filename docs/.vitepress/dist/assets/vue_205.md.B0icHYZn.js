import{_ as l,c as i,o as a,a4 as e}from"./chunks/framework.2gWjYe7W.js";const f=JSON.parse('{"title":"SPA 加载优化","description":"","frontmatter":{},"headers":[],"relativePath":"vue/205.md","filePath":"vue/205.md","lastUpdated":null}'),t={name:"vue/205.md"},o=e('<h1 id="spa-加载优化" tabindex="-1">SPA 加载优化 <a class="header-anchor" href="#spa-加载优化" aria-label="Permalink to &quot;SPA 加载优化&quot;">​</a></h1><h2 id="原因" tabindex="-1">原因 <a class="header-anchor" href="#原因" aria-label="Permalink to &quot;原因&quot;">​</a></h2><ul><li>网络延迟问题</li><li>资源文件体积过大</li><li>资源重复请求</li><li>加载脚本的时候，堵塞页面渲染</li></ul><h2 id="解决方案" tabindex="-1">解决方案 <a class="header-anchor" href="#解决方案" aria-label="Permalink to &quot;解决方案&quot;">​</a></h2><ul><li>减小入口文件体积 <ul><li>路由懒加载</li><li>模块使用局部加载，tree-shaking</li></ul></li><li>静态资源本地缓存 <ul><li>http缓存,设置<code>Cache-Control</code>，<code>Last-Modified</code>，<code>Etag</code>等响应头</li><li>采用<code>Service Worker</code>离线缓存</li><li>合理使用localStorage，缓存一些不易更改的配置信息</li></ul></li><li>UI框架按需加载</li><li>图片资源的压缩 <ul><li>小图使用base64 iconfont 雪碧图</li></ul></li><li>防止模块重复打包 <ul><li>通过设置将出现多次的包抽离出来</li></ul></li><li>开启GZip压缩</li><li>使用SSR</li></ul><p><img src="https://static.vue-js.com/4fafe900-3acc-11eb-85f6-6fac77c0c9b3.png" alt="" loading="lazy"></p><h2 id="其他" tabindex="-1">其他 <a class="header-anchor" href="#其他" aria-label="Permalink to &quot;其他&quot;">​</a></h2><ul><li>使用路由懒加载、异步组件，实现组件拆分，减少入口文件体积大小,优化体验骨架屏</li><li>抽离公共代码，采用 splitChunks 进行代码分割。</li><li>组件加载采用按需加载的方式。</li><li>静态资源缓存，采用 HTTP 缓存 （强制缓存、对比缓存）、使用 localStorage 实现缓存资源。</li><li>图片资源的压缩，雪碧图、对小图片进行 base64 减少 http 请求。</li><li>打包时开启 gzip 压缩处理 <code>compression-webpack-plugin</code> 插件</li><li>静态资源采用 CDN 提速。终极的手段</li><li>使用 SSR 对首屏做服务端渲染。</li></ul>',8),c=[o];function r(s,d,n,u,h,_){return a(),i("div",null,c)}const m=l(t,[["render",r]]);export{f as __pageData,m as default};
