import{_ as i,c as l,o as e,a4 as a}from"./chunks/framework.2gWjYe7W.js";const P=JSON.parse('{"title":"地址栏输入URL后发生了什么","description":"","frontmatter":{},"headers":[],"relativePath":"net/11.md","filePath":"net/11.md","lastUpdated":null}'),o={name:"net/11.md"},t=a('<h1 id="地址栏输入url后发生了什么" tabindex="-1">地址栏输入URL后发生了什么 <a class="header-anchor" href="#地址栏输入url后发生了什么" aria-label="Permalink to &quot;地址栏输入URL后发生了什么&quot;">​</a></h1><ul><li>URL解析</li><li>DNS 查询</li><li>TCP 连接</li><li>HTTP 请求</li><li>响应请求</li><li>页面渲染</li></ul><h2 id="_1-访问流程概述" tabindex="-1"><strong>1.访问流程概述</strong> <a class="header-anchor" href="#_1-访问流程概述" aria-label="Permalink to &quot;**1.访问流程概述**&quot;">​</a></h2><ul><li>用户输入的是关键字还是URL？ 如果是关键字则使用默认搜索引擎生成URL。</li><li>浏览器首先会对输入的URL进行解析，以确定要访问的网站或资源的地址。浏览器查找当前URL是否存在缓存，如果有缓存、并且缓存未过期，直接从缓存中返回。</li><li>查看域名是否已经被解析过了，没有解析过进行<code>DNS</code>解析将域名解析成<code>IP</code>地址，并增加端口号。</li><li>利用<code>IP</code>地址进行寻址，请求排队。同一个域名下请求数量不能多余6个。</li><li>排队后服务器创建<code>TCP</code>链接 （三次握手）</li><li>如果请求是<code>HTTPS</code>，进行<code>SSL</code>协商</li><li>利用<code>TCP</code>协议将大文件拆分成数据包进行传输(有序传输)，可靠的传输给服务器（丢包重传），服务器收到后按照序号重排数据包 （增加<code>TCP</code>头部，<code>IP</code>头部）</li><li>发送HTTP请求（请求行，请求头，请求体）</li><li><code>HTTP 1.1</code>中支持<code>keep-alive</code>属性,TCP链接不会立即关闭，后续请求可以省去建立链接时间。</li><li>服务器响应结果（响应行，响应头，响应体）</li><li>返回状态码为301、302时，浏览器会进行重定向操作。（重新进行导航）</li><li>根据响应内容进行页面渲染。（如果依赖其他资源会再次发送请求）</li></ul><h3 id="_2-timing" tabindex="-1"><strong>2.Timing</strong> <a class="header-anchor" href="#_2-timing" aria-label="Permalink to &quot;**2.Timing**&quot;">​</a></h3><p><img src="https://zishui.oss-cn-beijing.aliyuncs.com/image-20231018103217152.png" alt="" loading="lazy"></p><ul><li>Queuing : 请求发送前会根据优先级进行排队，同时每个域名最多处理6个TCP链接，超过的也会进行排队，并且分配磁盘空间时也会消耗一定时间。</li><li>Stalled :请求发出前的等待时间（处理代理，链接复用）</li><li>DNS lookup :查找 DNS 的时间</li><li>initial Connection :建立TCP链接时间</li><li>SSL : SSL 握手时间（ SSL 协商）</li><li>Request Sent :请求发送时间（可忽略）</li><li>Waiting ( TTFB ) :等待响应的时间，等待返回首个字符的时间</li><li>Content Dowloaded :用于下载响应的时间</li></ul><h3 id="_3-网络优化" tabindex="-1"><strong>3.网络优化</strong> <a class="header-anchor" href="#_3-网络优化" aria-label="Permalink to &quot;**3.网络优化**&quot;">​</a></h3><ul><li>减少网站中使用的域名域名越多 ， DNS 解析花费的时间越多。</li><li>减少网站中的重定向操作，重定向会增加请求数量。</li><li>选用高性能的Web服务器 Nginx 代理静态资源 。</li><li>资源大小优化：对资源进行压缩、合并（合并可以减少请求，也会产生文件缓存问题）， 使用 gzip/br 压缩。</li><li>给资源添加强制缓存和协商缓存。</li><li>升级 HTTP/1.x 到 HTTP/2</li><li>付费、将静态资源迁移至 CDN</li></ul>',9),n=[t];function c(d,r,s,_,u,T){return e(),l("div",null,n)}const S=i(o,[["render",c]]);export{P as __pageData,S as default};
