import{_ as t,D as h,c as l,I as e,w as n,j as s,a as i,a4 as r,o as p}from"./chunks/framework.2gWjYe7W.js";const f=JSON.parse('{"title":"Vue 项目中的错误处理方式","description":"","frontmatter":{},"headers":[],"relativePath":"vue/109.md","filePath":"vue/109.md","lastUpdated":null}'),k={name:"vue/109.md"},d=s("h1",{id:"vue-项目中的错误处理方式",tabindex:"-1"},[i("Vue 项目中的错误处理方式 "),s("a",{class:"header-anchor",href:"#vue-项目中的错误处理方式","aria-label":'Permalink to "Vue 项目中的错误处理方式"'},"​")],-1),E=s("h2",{id:"_1-1-errorcaptured-钩子",tabindex:"-1"},[i("1.1 errorCaptured 钩子 "),s("a",{class:"header-anchor",href:"#_1-1-errorcaptured-钩子","aria-label":'Permalink to "1.1 errorCaptured 钩子"'},"​")],-1),o=s("p",null,[i("可以捕获一个来自后代组件的错误时被调用，如果全局的 "),s("code",null,"config.errorHandler"),i(" 被定义，所有的错误仍会发送它，因此这些错误仍然会向单一的分析服务的地方进行汇报。 父组件（errorCaptured）-》 子组件（errorCaptured）-》 孙子组件出错时，错误会一直向上抛。如果 errorCaptured 中返回 false 则会阻断传播。")],-1),c=r(`<h2 id="_1-2-全局设置错误处理" tabindex="-1">1.2 全局设置错误处理 <a class="header-anchor" href="#_1-2-全局设置错误处理" aria-label="Permalink to &quot;1.2 全局设置错误处理&quot;">​</a></h2><p>如果在组件渲染时出现运行错误，错误将会被传递至全局 <code>config.errorHandler</code> 配置函数。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Vue.config.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">errorHandler</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">err</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">vm</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">info</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(err, vm, info);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre></div><h2 id="_1-3-接口异常处理" tabindex="-1">1.3 接口异常处理 <a class="header-anchor" href="#_1-3-接口异常处理" aria-label="Permalink to &quot;1.3 接口异常处理&quot;">​</a></h2><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">instance.interceptors.response.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">use</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">res</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> res.data;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">err</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> res </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> err.response;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (res.status </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 400</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      handleError</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(response); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 统一处理接口异常</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Promise</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">reject</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(error);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><h2 id="_1-4-异常监控收集" tabindex="-1">1.4 异常监控收集 <a class="header-anchor" href="#_1-4-异常监控收集" aria-label="Permalink to &quot;1.4 异常监控收集&quot;">​</a></h2><p>收集到错误后，提交到前端监控系统中，这样我们可以分析前端代码的异常信息啦。</p>`,7);function g(y,u,_,F,m,v){const a=h("Bookmark");return p(),l("div",null,[d,E,o,e(a,null,{default:n(()=>[i("[异常捕获源码实现](https://github1s.com/vuejs/vue/blob/main/src/core/util/error.ts#L7-L8)")]),_:1}),c,e(a,null,{default:n(()=>[i(" [轻量级前端监控库mitojs](https://gitcode.com/mitojs/mitojs/overview?utm_source=artical_gitcode&isLogin=1) ")]),_:1})])}const C=t(k,[["render",g]]);export{f as __pageData,C as default};
