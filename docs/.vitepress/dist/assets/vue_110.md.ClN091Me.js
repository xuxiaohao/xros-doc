import{_ as a,D as s,c,I as t,w as o,a4 as i,o as n,a as r}from"./chunks/framework.2gWjYe7W.js";const b=JSON.parse('{"title":"如何理解 reactive、ref 、toRef 和 toRefs？","description":"","frontmatter":{},"headers":[],"relativePath":"vue/110.md","filePath":"vue/110.md","lastUpdated":null}'),l={name:"vue/110.md"},f=i('<h1 id="如何理解-reactive、ref-、toref-和-torefs" tabindex="-1">如何理解 reactive、ref 、toRef 和 toRefs？ <a class="header-anchor" href="#如何理解-reactive、ref-、toref-和-torefs" aria-label="Permalink to &quot;如何理解 reactive、ref 、toRef 和 toRefs？&quot;">​</a></h1><ul><li><strong>reactive</strong>：将一个普通对象转换为响应式对象。(采用 new Proxy 进行实现) 通过代理对象访问属性时会进行依赖收集，属性更新时会触发依赖更新。</li><li><strong>ref</strong>: 创建一个包装对象（Wrapper Object）将一个简单的值包装成一个响应式对象，当访问<code>value</code>属性时会进行依赖收集，更新<code>value</code>属性时会触发依赖更新。(<strong>采用类访问器getter setter实现</strong>) <em>内部是对象的情况会采用 reactive 来进行处理</em></li><li><strong>toRef</strong>：创建<code>ref</code>对象，引用<code>reactive</code>中的属性。</li><li><strong>toRefs</strong>：批量创建<code>ref</code>对象，引用<code>reactive</code>中的属性。</li></ul>',2);function d(_,u,v,m,p,g){const e=s("Bookmark");return n(),c("div",null,[f,t(e,null,{default:o(()=>[r("[reactive 实现](https://github1s.com/vuejs/core/blob/main/packages/reactivity/src/reactive.ts#L83-L84)")]),_:1}),t(e,null,{default:o(()=>[r(" [ref 实现](https://github1s.com/vuejs/core/blob/main/packages/reactivity/src/ref.ts#L93-L94) ")]),_:1}),t(e,null,{default:o(()=>[r(" [toRef 、toRefs 实现](https://github1s.com/vuejs/core/blob/main/packages/reactivity/src/ref.ts#L414-L415) ")]),_:1})])}const R=a(l,[["render",d]]);export{b as __pageData,R as default};
